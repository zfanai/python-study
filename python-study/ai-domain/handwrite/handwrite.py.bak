    # -*- coding: utf-8 -*-
  2 #本程序由UESTC的BigMoyan完成，并供所有人免费参考学习，但任何对本程序的使用必须包含这条声明
  3 import math
  4 import numpy as np
  5 import scipy.io as sio
  6 
  7 
  8 # 读入数据
  9 ################################################################################################
 10 print "输入样本文件名（需放在程序目录下）"
 11 filename = 'mnist_train.mat'     # raw_input() # 换成raw_input()可自由输入文件名
 12 sample = sio.loadmat(filename)
 13 sample = sample["mnist_train"]
 14 sample /= 256.0       # 特征向量归一化
 15 
 16 print "输入标签文件名（需放在程序目录下）"
 17 filename = 'mnist_train_labels.mat'   # raw_input() # 换成raw_input()可自由输入文件名
 18 label = sio.loadmat(filename)
 19 label = label["mnist_train_labels"]
 20 
 21 ##################################################################################################
 22 
 23 
 24 # 神经网络配置
 25 ##################################################################################################
 26 samp_num = len(sample)      # 样本总数
 27 inp_num = len(sample[0])    # 输入层节点数
 28 out_num = 10                # 输出节点数
 29 hid_num = 9  # 隐层节点数(经验公式)
 30 w1 = 0.2*np.random.random((inp_num, hid_num))- 0.1   # 初始化输入层权矩阵
 31 w2 = 0.2*np.random.random((hid_num, out_num))- 0.1   # 初始化隐层权矩阵
 32 hid_offset = np.zeros(hid_num)     # 隐层偏置向量
 33 out_offset = np.zeros(out_num)     # 输出层偏置向量
 34 inp_lrate = 0.3             # 输入层权值学习率
 35 hid_lrate = 0.3             # 隐层学权值习率
 36 err_th = 0.01                # 学习误差门限
 37 
 38 
 39 ###################################################################################################
 40 
 41 # 必要函数定义
 42 ###################################################################################################
 43 def get_act(x):
 44     act_vec = []
 45     for i in x:
 46         act_vec.append(1/(1+math.exp(-i)))
 47     act_vec = np.array(act_vec)
 48     return act_vec
 49 
 50 def get_err(e):
 51     return 0.5*np.dot(e,e)
 52 
 53 
 54 ###################################################################################################
 55 
 56 # 训练——可使用err_th与get_err() 配合，提前结束训练过程
 57 ###################################################################################################
 58 
 59 for count in range(0, samp_num):
 60     print count
 61     t_label = np.zeros(out_num)
 62     t_label[label[count]] = 1
 63     #前向过程
 64     hid_value = np.dot(sample[count], w1) + hid_offset       # 隐层值
 65     hid_act = get_act(hid_value)                # 隐层激活值
 66     out_value = np.dot(hid_act, w2) + out_offset             # 输出层值
 67     out_act = get_act(out_value)                # 输出层激活值
 68 
 69     #后向过程
 70     e = t_label - out_act                          # 输出值与真值间的误差
 71     out_delta = e * out_act * (1-out_act)                                       # 输出层delta计算
 72     hid_delta = hid_act * (1-hid_act) * np.dot(w2, out_delta)                   # 隐层delta计算
 73     for i in range(0, out_num):
 74         w2[:,i] += hid_lrate * out_delta[i] * hid_act   # 更新隐层到输出层权向量
 75     for i in range(0, hid_num):
 76         w1[:,i] += inp_lrate * hid_delta[i] * sample[count]      # 更新输出层到隐层的权向量
 77 
 78     out_offset += hid_lrate * out_delta                             # 输出层偏置更新
 79     hid_offset += inp_lrate * hid_delta
 80 
 81 ###################################################################################################
 82 
 83 # 测试网络
 84 ###################################################################################################
 85 filename = 'mnist_test.mat'  # raw_input() # 换成raw_input()可自由输入文件名
 86 test = sio.loadmat(filename)
 87 test_s = test["mnist_test"]
 88 test_s /= 256.0
 89 
 90 filename = 'mnist_test_labels.mat'  # raw_input() # 换成raw_input()可自由输入文件名
 91 testlabel = sio.loadmat(filename)
 92 test_l = testlabel["mnist_test_labels"]
 93 right = np.zeros(10)
 94 numbers = np.zeros(10)
 95                                     # 以上读入测试数据
 96 # 统计测试数据中各个数字的数目
 97 for i in test_l:
 98     numbers[i] += 1
 99 
100 for count in range(len(test_s)):
101     hid_value = np.dot(test_s[count], w1) + hid_offset       # 隐层值
102     hid_act = get_act(hid_value)                # 隐层激活值
103     out_value = np.dot(hid_act, w2) + out_offset             # 输出层值
104     out_act = get_act(out_value)                # 输出层激活值
105     if np.argmax(out_act) == test_l[count]:
106         right[test_l[count]] += 1
107 print right
108 print numbers
109 result = right/numbers
110 sum = right.sum()
111 print result
112 print sum/len(test_s)
113 ###################################################################################################
114 # 输出网络
115 ###################################################################################################
116 Network = open("MyNetWork", 'w')
117 Network.write(str(inp_num))
118 Network.write('\n')
119 Network.write(str(hid_num))
120 Network.write('\n')
121 Network.write(str(out_num))
122 Network.write('\n')
123 for i in w1:
124     for j in i:
125         Network.write(str(j))
126         Network.write(' ')
127     Network.write('\n')
128 Network.write('\n')
129 
130 for i in w2:
131     for j in i:
132         Network.write(str(j))
133         Network.write(' ')
134 Network.write('\n')
135 Network.close()